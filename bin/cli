#!/usr/bin/env node

"use strict";

var docopt = require('docopt').docopt;
var chalk = require("chalk");
var tabtab = require('tabtab');
var path = require('path');
var findUp = require('find-up');
var Fdt = require('../lib/index');
var packageJson = require('../package.json');

var doc = "force-dev-tool.\n" +
	"\n" +
	"Usage:\n" +
	"	force-dev-tool <command> [<args>...]\n" +
	"	force-dev-tool -h | --help\n" +
	"	force-dev-tool --version\n" +
	"\n" +
	"Options:\n" +
	"	-h --help       Show this screen.\n" +
	"	--version       Show version.\n" +
	"\n" +
	"Commands:\n" +
	"	help            Print help for a command or in general\n" +
	"	remote          Manage orgs (list, add, remove, set default, set password)\n" +
	"	login           Login using Metadata API and show login URL\n" +
	"	fetch           Fetch describe information from a remote\n" +
	"	info            Show describe information from a remote\n" +
	"	package         Generate a package.xml file from local describe information\n" +
	"	retrieve        Retrieve metadata specified in a package.xml\n" +
	"	deploy          Deploy metadata specified in a package.xml\n" +
	"	deployTest      DEPRECATED! Use `deploy -t` instead\n" +
	"	validate        DEPRECATED! Use `deploy -c` instead\n" +
	"	validateTest    DEPRECATED! Use `deploy -ct` instead\n" +
	"	test            Execute unit tests\n" +
	"	changeset       Create a changeset/deployment from a unified diff input or cli args\n" +
	"	factory-reset   Create a changeset/deployment to remove all custom metadata from a remote\n" +
	"	query           Execute a SOQL query returing JSON\n" +
	"	bulk            (alpha) Import/export data in CSV format using the bulk API\n" +
	"	execute         (alpha) Execute anonymous Apex\n" +
	"	completion      (alpha) Print command line completion\n" +
	"\n" +
	"See 'force-dev-tool help <command>' for more information on a specific command.";

var opts = docopt(doc, {
	version: packageJson.version,
	options_first: true
});

var command = opts['<command>'];
var args = opts['<args>'];
var topic = (args !== null && args.length > 0) ? args[0] : null;
var validCommands = ['remote', 'login', 'fetch', 'info', 'package', 'retrieve', 'test', 'validate', 'validateTest', 'deploy', 'deployTest', 'changeset', 'factory-reset', 'query', 'bulk', 'execute'];
var validCommandsRegExp = new RegExp('^force-dev-tool\\s(' + validCommands.join('|') + ')\\w?');

var storagePath = process.cwd();
var storagePathBestGuess = findUp.sync(path.join('src', 'package.xml'));
if (storagePathBestGuess) {
	storagePath = storagePathBestGuess.substr(0, storagePathBestGuess.lastIndexOf(path.join('src', 'package.xml')) - 1);
}
var storage = new Fdt.Storage({
	path: storagePath
});
var remotes = new Fdt.Providers.Multi({
	providers: [
		new Fdt.Providers.Env({
			env: process.env
		}),
		new Fdt.Providers.Config({
			path: path.join(storage.getConfigPath(), '.orgs.json')
		})
	]
});
var project = new Fdt.Project({
	storage: storage,
	remotes: remotes
});
var SubCommand;

if (command === 'help') {
	if (validCommands.indexOf(topic) !== -1) {
		SubCommand = require('../lib/cli/' + topic);
		new SubCommand(project).help();
	} else {
		console.log(doc);
	}
} else if (command === 'completion') {
	return tabtab.complete('force-dev-tool', function(err, data) {
		if (err || !data) {
			return;
		}
		// TODO: use docopt parse information instead
		if (validCommandsRegExp.test(data.line)) {
			SubCommand = require('../lib/cli/' + data.line.split(/\s/)[1]);
			return new SubCommand(project).complete(tabtab, data);
		}
		if (/^--\w?/.test(data.last)) {
			return tabtab.log(['help', 'version'], data, '--');
		}
		if (/^-\w?/.test(data.last)) {
			return tabtab.log(['h'], data, '-');
		}
		tabtab.log(validCommands.concat(['help', '--help', '--version', '-h']), data);
	});
} else if (validCommands.indexOf(command) !== -1) {
	SubCommand = require('../lib/cli/' + command);
	try {
		new SubCommand(project).process({
			stdin: process.stdin,
			stdout: process.stdout,
			stderr: process.stderr,
			cwd: process.cwd()
		}, function(err, message) {
			if (err) {
				console.log(chalk.red(err instanceof Error ? err : new Error(err)));
				process.exitCode = 1;
				return;
			}
			if (message) {
				console.log(chalk.green(message));
			}
		});
	} catch (processErr) {
		if (process.env.DEBUG) {
			throw processErr;
		}
		console.log(chalk.red(processErr));
		process.exitCode = 1;
	}
} else {
	console.log(doc);
	process.exitCode = 1;
}
